import random
import sys
import msvcrt
import os

#  —Ñ—É–Ω–∫—Ü–∏—è
def get_key():
    return msvcrt.getch().decode("utf-8").lower()

def clear_console():
    sys.stdout.write("\033[2J\033[H")
    sys.stdout.flush()

# —ç–º–æ–¥–∑–∏ –∫–∞—Ä—Ç–∞
EMOJI_MAP = {
    "#": "üü¶",  # —Å—Ç–µ–Ω–∞
    ".": "‚ö™",  # —Ç–æ—á–∫–∞
    "P1": "üòã", # –ø–∞–∫–º–∞–Ω 1
    "P2": "üòé", # –ø–∞–∫–º–∞–Ω2
    " ": "‚¨õ",  # –ø—É—Å—Ç–æ–µ
    "G": "üëª"   # –ø—Ä–∏–∑—Ä–∞–∫
}

# –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∞
def load_map(file_name):
    with open(file_name, "r", encoding="utf-8") as f:
        return [list(line.strip()) for line in f.readlines()]

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
from datetime import datetime
def save_result(player_name, score, result):
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    with open("results.txt", "a", encoding="utf-8") as f:
        f.write(f"[{now}] –ò–≥—Ä–æ–∫: {player_name} | –û—á–∫–∏: {score} | –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n")

# –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
def start_game(player1, player2):
    field = load_map("map.txt")
    pac1_pos = [1,1]
    pac2_pos = [len(field)-2,len(field[0])-2]
    field[pac1_pos[0]][pac1_pos[1]]="P1"
    field[pac2_pos[0]][pac2_pos[1]]="P2"

    ghosts=[[1,len(field[0])-2],[len(field)-2,2]]
    for gx,gy in ghosts:
        field[gx][gy]="G"

    score1=0
    score2=0
    mission_points=50
    game_over=False
    pause=False
    mission_done=False  # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–∏—Å—Å–∏—è

    def print_field():
        clear_console()
        for row in field:
            display_row=""
            for c in row:
                if c=="P1":
                    display_row+=EMOJI_MAP["P1"]
                elif c=="P2":
                    display_row+=EMOJI_MAP["P2"]
                else:
                    display_row+=EMOJI_MAP.get(c,c)
            print(display_row)
        print(f"{player1}: {score1} –æ—á–∫–æ–≤ | {player2}: {score2} –æ—á–∫–æ–≤")
        remaining_dots = mission_points - (score1 + score2)
        print(f"–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ—á–µ–∫ –¥–æ –º–∏—Å—Å–∏–∏: {max(remaining_dots,0)}")
        if mission_done:
            print(" –ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å —Ç–æ—á–∫–∏!")
        print("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: W A S D - –ò–≥—Ä–æ–∫ 1, I J K L - –ò–≥—Ä–æ–∫ 2, Q - –≤—ã—Ö–æ–¥, P - –ø–∞—É–∑–∞")

    def move_pacman(pos, dx, dy):
        nonlocal score1, score2, pac1_pos, pac2_pos
        new_x=(pos[0]+dx)%len(field)
        new_y=(pos[1]+dy)%len(field[0])
        target=field[new_x][new_y]
        if target!="#":
            if target==".":
                if pos==pac1_pos: score1+=1
                else: score2+=1
            elif target=="G":
                if pos==pac1_pos: score1=max(score1-5,0)
                else: score2=max(score2-5,0)
            field[pos[0]][pos[1]]=" "
            pos[0],pos[1]=new_x,new_y
            if pos==pac1_pos: field[new_x][new_y]="P1"
            else: field[new_x][new_y]="P2"

    def move_ghosts():
        new_positions=[]
        for gx,gy in ghosts:
            directions=[(-1,0),(1,0),(0,-1),(0,1)]
            random.shuffle(directions)
            for dx,dy in directions:
                nx=(gx+dx)%len(field)
                ny=(gy+dy)%len(field[0])
                if field[nx][ny] in [" ", "."]:
                    field[gx][gy]=" "
                    if [nx,ny]==pac1_pos:
                        score1=max(score1-5,0)
                    if [nx,ny]==pac2_pos:
                        score2=max(score2-5,0)
                    field[nx][ny]="G"
                    new_positions.append([nx,ny])
                    break
            else:
                new_positions.append([gx,gy])
        ghosts[:] = new_positions

    while not game_over:
        print_field()
        key=get_key()
        if key=="p":
            pause=not pause
        if pause:
            continue
        if key=="q":
            game_over=True
            result_text="–í—ã—Ö–æ–¥"
            break
        elif key in ["w","a","s","d"]:
            if key=="w": move_pacman(pac1_pos,-1,0)
            elif key=="s": move_pacman(pac1_pos,1,0)
            elif key=="a": move_pacman(pac1_pos,0,-1)
            elif key=="d": move_pacman(pac1_pos,0,1)
        elif key in ["i","j","k","l"]:
            if key=="i": move_pacman(pac2_pos,-1,0)
            elif key=="k": move_pacman(pac2_pos,1,0)
            elif key=="j": move_pacman(pac2_pos,0,-1)
            elif key=="l": move_pacman(pac2_pos,0,1)

        move_ghosts()

        if score1+score2>=mission_points and not mission_done:
            mission_done=True  # –≤–∫–ª —Ñ–ª–∞–≥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    print_field()
    result_text="–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!"
    print(result_text)
    save_result(player1, score1, result_text)
    save_result(player2, score2, result_text)

# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
while True:
    clear_console()
    print("=== Pac-Man ===")
    print("1. –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
    print("2. –†–µ–∫–æ—Ä–¥—ã")
    print("3. –í—ã—Ö–æ–¥")
    choice=get_key()
    if choice=="1":
        clear_console()
        print('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "Pacman" –Ω–∞ –æ–¥–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –°–∞–≥–∞–Ω—Ç–∞–π –ê–¥–∏–ª—å CS-204(s)')
        player1=input("–ò–º—è –∏–≥—Ä–æ–∫–∞ 1: ")
        player2=input("–ò–º—è –∏–≥—Ä–æ–∫–∞ 2: ")
        start_game(player1,player2)
    elif choice=="2":
        clear_console()
        if os.path.exists("results.txt"):
            with open("results.txt", encoding="utf-8") as f:
                for line in f:
                    print(line.strip())
        else:
            print("–†–µ–∫–æ—Ä–¥—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
    elif choice=="3":
        break
